name: Bygg og deploy master

on:
  push:
    branches:
      - 'master'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  IMAGE: ghcr.io/${{ github.repository }}/tiltaksgjennomforing-varsel:${{ github.sha }}

jobs:
  bygg:
    name: Bygg
    runs-on: ubuntu-latest
    steps:
      - name: Lukk deployment-issues
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deploy']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Oppsett Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Gjenopprett Maven-cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Bygg og test med Maven
        run: mvn package -B -Dsurefire.useFile=false

      - name: Bygg, tag og push Docker-image
        run: |
          echo ${GITHUB_TOKEN} | docker login ghcr.io -u ${GITHUB_REPOSITORY} --password-stdin
          docker build --tag ${IMAGE} .
          docker push ${IMAGE}

  deploy-dev:
    name: Deploy til dev
    runs-on: ubuntu-latest
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Deploy til dev-fss
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: naiserator.yaml
          PRINT_PAYLOAD: true
          VAR: "spring-profil=preprod"

  deploy-dev-aiven:
    name: Deploy til dev som Aiven app
    runs-on: ubuntu-latest
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Deploy til dev-fss
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: naiserator.yaml
          PRINT_PAYLOAD: true
          VAR: "spring-profil=preprod-aiven,aiven=true"

  deploy-prod:
    name: Deploy til prod
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Deploy til prod-fss
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: naiserator.yaml
          PRINT_PAYLOAD: true
          VAR: "spring-profil=prod"